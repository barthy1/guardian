// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden"
	"github.com/cloudfoundry-incubator/guardian/rundmc"
)

type FakeContainerRunner struct {
	RunStub        func(path string, io garden.ProcessIO) (garden.Process, error)
	runMutex       sync.RWMutex
	runArgsForCall []struct {
		path string
		io   garden.ProcessIO
	}
	runReturns struct {
		result1 garden.Process
		result2 error
	}
	ExecStub        func(path string, spec garden.ProcessSpec, io garden.ProcessIO) (garden.Process, error)
	execMutex       sync.RWMutex
	execArgsForCall []struct {
		path string
		spec garden.ProcessSpec
		io   garden.ProcessIO
	}
	execReturns struct {
		result1 garden.Process
		result2 error
	}
}

func (fake *FakeContainerRunner) Run(path string, io garden.ProcessIO) (garden.Process, error) {
	fake.runMutex.Lock()
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
		path string
		io   garden.ProcessIO
	}{path, io})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub(path, io)
	} else {
		return fake.runReturns.result1, fake.runReturns.result2
	}
}

func (fake *FakeContainerRunner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *FakeContainerRunner) RunArgsForCall(i int) (string, garden.ProcessIO) {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return fake.runArgsForCall[i].path, fake.runArgsForCall[i].io
}

func (fake *FakeContainerRunner) RunReturns(result1 garden.Process, result2 error) {
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 garden.Process
		result2 error
	}{result1, result2}
}

func (fake *FakeContainerRunner) Exec(path string, spec garden.ProcessSpec, io garden.ProcessIO) (garden.Process, error) {
	fake.execMutex.Lock()
	fake.execArgsForCall = append(fake.execArgsForCall, struct {
		path string
		spec garden.ProcessSpec
		io   garden.ProcessIO
	}{path, spec, io})
	fake.execMutex.Unlock()
	if fake.ExecStub != nil {
		return fake.ExecStub(path, spec, io)
	} else {
		return fake.execReturns.result1, fake.execReturns.result2
	}
}

func (fake *FakeContainerRunner) ExecCallCount() int {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return len(fake.execArgsForCall)
}

func (fake *FakeContainerRunner) ExecArgsForCall(i int) (string, garden.ProcessSpec, garden.ProcessIO) {
	fake.execMutex.RLock()
	defer fake.execMutex.RUnlock()
	return fake.execArgsForCall[i].path, fake.execArgsForCall[i].spec, fake.execArgsForCall[i].io
}

func (fake *FakeContainerRunner) ExecReturns(result1 garden.Process, result2 error) {
	fake.ExecStub = nil
	fake.execReturns = struct {
		result1 garden.Process
		result2 error
	}{result1, result2}
}

var _ rundmc.ContainerRunner = new(FakeContainerRunner)
