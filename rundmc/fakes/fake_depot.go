// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/guardian/rundmc"
	"github.com/cloudfoundry-incubator/guardian/rundmc/depot"
	"github.com/pivotal-golang/lager"
)

type FakeDepot struct {
	CreateStub        func(log lager.Logger, handle string, bundle depot.BundleSaver) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		log    lager.Logger
		handle string
		bundle depot.BundleSaver
	}
	createReturns struct {
		result1 error
	}
	LookupStub        func(log lager.Logger, handle string) (path string, err error)
	lookupMutex       sync.RWMutex
	lookupArgsForCall []struct {
		log    lager.Logger
		handle string
	}
	lookupReturns struct {
		result1 string
		result2 error
	}
	DestroyStub        func(log lager.Logger, handle string) error
	destroyMutex       sync.RWMutex
	destroyArgsForCall []struct {
		log    lager.Logger
		handle string
	}
	destroyReturns struct {
		result1 error
	}
	HandlesStub        func() ([]string, error)
	handlesMutex       sync.RWMutex
	handlesArgsForCall []struct{}
	handlesReturns struct {
		result1 []string
		result2 error
	}
}

func (fake *FakeDepot) Create(log lager.Logger, handle string, bundle depot.BundleSaver) error {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		log    lager.Logger
		handle string
		bundle depot.BundleSaver
	}{log, handle, bundle})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(log, handle, bundle)
	} else {
		return fake.createReturns.result1
	}
}

func (fake *FakeDepot) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeDepot) CreateArgsForCall(i int) (lager.Logger, string, depot.BundleSaver) {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].log, fake.createArgsForCall[i].handle, fake.createArgsForCall[i].bundle
}

func (fake *FakeDepot) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDepot) Lookup(log lager.Logger, handle string) (path string, err error) {
	fake.lookupMutex.Lock()
	fake.lookupArgsForCall = append(fake.lookupArgsForCall, struct {
		log    lager.Logger
		handle string
	}{log, handle})
	fake.lookupMutex.Unlock()
	if fake.LookupStub != nil {
		return fake.LookupStub(log, handle)
	} else {
		return fake.lookupReturns.result1, fake.lookupReturns.result2
	}
}

func (fake *FakeDepot) LookupCallCount() int {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return len(fake.lookupArgsForCall)
}

func (fake *FakeDepot) LookupArgsForCall(i int) (lager.Logger, string) {
	fake.lookupMutex.RLock()
	defer fake.lookupMutex.RUnlock()
	return fake.lookupArgsForCall[i].log, fake.lookupArgsForCall[i].handle
}

func (fake *FakeDepot) LookupReturns(result1 string, result2 error) {
	fake.LookupStub = nil
	fake.lookupReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeDepot) Destroy(log lager.Logger, handle string) error {
	fake.destroyMutex.Lock()
	fake.destroyArgsForCall = append(fake.destroyArgsForCall, struct {
		log    lager.Logger
		handle string
	}{log, handle})
	fake.destroyMutex.Unlock()
	if fake.DestroyStub != nil {
		return fake.DestroyStub(log, handle)
	} else {
		return fake.destroyReturns.result1
	}
}

func (fake *FakeDepot) DestroyCallCount() int {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return len(fake.destroyArgsForCall)
}

func (fake *FakeDepot) DestroyArgsForCall(i int) (lager.Logger, string) {
	fake.destroyMutex.RLock()
	defer fake.destroyMutex.RUnlock()
	return fake.destroyArgsForCall[i].log, fake.destroyArgsForCall[i].handle
}

func (fake *FakeDepot) DestroyReturns(result1 error) {
	fake.DestroyStub = nil
	fake.destroyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDepot) Handles() ([]string, error) {
	fake.handlesMutex.Lock()
	fake.handlesArgsForCall = append(fake.handlesArgsForCall, struct{}{})
	fake.handlesMutex.Unlock()
	if fake.HandlesStub != nil {
		return fake.HandlesStub()
	} else {
		return fake.handlesReturns.result1, fake.handlesReturns.result2
	}
}

func (fake *FakeDepot) HandlesCallCount() int {
	fake.handlesMutex.RLock()
	defer fake.handlesMutex.RUnlock()
	return len(fake.handlesArgsForCall)
}

func (fake *FakeDepot) HandlesReturns(result1 []string, result2 error) {
	fake.HandlesStub = nil
	fake.handlesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

var _ rundmc.Depot = new(FakeDepot)
