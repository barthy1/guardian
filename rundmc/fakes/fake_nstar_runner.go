// This file was generated by counterfeiter
package fakes

import (
	"io"
	"sync"

	"github.com/cloudfoundry-incubator/guardian/rundmc"
	"github.com/pivotal-golang/lager"
)

type FakeNstarRunner struct {
	StreamInStub        func(log lager.Logger, pid int, path string, user string, tarStream io.Reader) error
	streamInMutex       sync.RWMutex
	streamInArgsForCall []struct {
		log       lager.Logger
		pid       int
		path      string
		user      string
		tarStream io.Reader
	}
	streamInReturns struct {
		result1 error
	}
}

func (fake *FakeNstarRunner) StreamIn(log lager.Logger, pid int, path string, user string, tarStream io.Reader) error {
	fake.streamInMutex.Lock()
	fake.streamInArgsForCall = append(fake.streamInArgsForCall, struct {
		log       lager.Logger
		pid       int
		path      string
		user      string
		tarStream io.Reader
	}{log, pid, path, user, tarStream})
	fake.streamInMutex.Unlock()
	if fake.StreamInStub != nil {
		return fake.StreamInStub(log, pid, path, user, tarStream)
	} else {
		return fake.streamInReturns.result1
	}
}

func (fake *FakeNstarRunner) StreamInCallCount() int {
	fake.streamInMutex.RLock()
	defer fake.streamInMutex.RUnlock()
	return len(fake.streamInArgsForCall)
}

func (fake *FakeNstarRunner) StreamInArgsForCall(i int) (lager.Logger, int, string, string, io.Reader) {
	fake.streamInMutex.RLock()
	defer fake.streamInMutex.RUnlock()
	return fake.streamInArgsForCall[i].log, fake.streamInArgsForCall[i].pid, fake.streamInArgsForCall[i].path, fake.streamInArgsForCall[i].user, fake.streamInArgsForCall[i].tarStream
}

func (fake *FakeNstarRunner) StreamInReturns(result1 error) {
	fake.StreamInStub = nil
	fake.streamInReturns = struct {
		result1 error
	}{result1}
}

var _ rundmc.NstarRunner = new(FakeNstarRunner)
