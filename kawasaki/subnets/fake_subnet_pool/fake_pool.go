// This file was generated by counterfeiter
package fake_subnet_pool

import (
	"net"
	"sync"

	"github.com/cloudfoundry-incubator/guardian/kawasaki/subnets"
	"github.com/pivotal-golang/lager"
)

type FakePool struct {
	AcquireStub        func(lager.Logger, subnets.SubnetSelector, subnets.IPSelector) (*net.IPNet, net.IP, error)
	acquireMutex       sync.RWMutex
	acquireArgsForCall []struct {
		arg1 lager.Logger
		arg2 subnets.SubnetSelector
		arg3 subnets.IPSelector
	}
	acquireReturns struct {
		result1 *net.IPNet
		result2 net.IP
		result3 error
	}
	ReleaseStub        func(*net.IPNet, net.IP) error
	releaseMutex       sync.RWMutex
	releaseArgsForCall []struct {
		arg1 *net.IPNet
		arg2 net.IP
	}
	releaseReturns struct {
		result1 error
	}
	RemoveStub        func(*net.IPNet, net.IP) error
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		arg1 *net.IPNet
		arg2 net.IP
	}
	removeReturns struct {
		result1 error
	}
	CapacityStub        func() int
	capacityMutex       sync.RWMutex
	capacityArgsForCall []struct{}
	capacityReturns struct {
		result1 int
	}
}

func (fake *FakePool) Acquire(arg1 lager.Logger, arg2 subnets.SubnetSelector, arg3 subnets.IPSelector) (*net.IPNet, net.IP, error) {
	fake.acquireMutex.Lock()
	fake.acquireArgsForCall = append(fake.acquireArgsForCall, struct {
		arg1 lager.Logger
		arg2 subnets.SubnetSelector
		arg3 subnets.IPSelector
	}{arg1, arg2, arg3})
	fake.acquireMutex.Unlock()
	if fake.AcquireStub != nil {
		return fake.AcquireStub(arg1, arg2, arg3)
	} else {
		return fake.acquireReturns.result1, fake.acquireReturns.result2, fake.acquireReturns.result3
	}
}

func (fake *FakePool) AcquireCallCount() int {
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	return len(fake.acquireArgsForCall)
}

func (fake *FakePool) AcquireArgsForCall(i int) (lager.Logger, subnets.SubnetSelector, subnets.IPSelector) {
	fake.acquireMutex.RLock()
	defer fake.acquireMutex.RUnlock()
	return fake.acquireArgsForCall[i].arg1, fake.acquireArgsForCall[i].arg2, fake.acquireArgsForCall[i].arg3
}

func (fake *FakePool) AcquireReturns(result1 *net.IPNet, result2 net.IP, result3 error) {
	fake.AcquireStub = nil
	fake.acquireReturns = struct {
		result1 *net.IPNet
		result2 net.IP
		result3 error
	}{result1, result2, result3}
}

func (fake *FakePool) Release(arg1 *net.IPNet, arg2 net.IP) error {
	fake.releaseMutex.Lock()
	fake.releaseArgsForCall = append(fake.releaseArgsForCall, struct {
		arg1 *net.IPNet
		arg2 net.IP
	}{arg1, arg2})
	fake.releaseMutex.Unlock()
	if fake.ReleaseStub != nil {
		return fake.ReleaseStub(arg1, arg2)
	} else {
		return fake.releaseReturns.result1
	}
}

func (fake *FakePool) ReleaseCallCount() int {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return len(fake.releaseArgsForCall)
}

func (fake *FakePool) ReleaseArgsForCall(i int) (*net.IPNet, net.IP) {
	fake.releaseMutex.RLock()
	defer fake.releaseMutex.RUnlock()
	return fake.releaseArgsForCall[i].arg1, fake.releaseArgsForCall[i].arg2
}

func (fake *FakePool) ReleaseReturns(result1 error) {
	fake.ReleaseStub = nil
	fake.releaseReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePool) Remove(arg1 *net.IPNet, arg2 net.IP) error {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		arg1 *net.IPNet
		arg2 net.IP
	}{arg1, arg2})
	fake.removeMutex.Unlock()
	if fake.RemoveStub != nil {
		return fake.RemoveStub(arg1, arg2)
	} else {
		return fake.removeReturns.result1
	}
}

func (fake *FakePool) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakePool) RemoveArgsForCall(i int) (*net.IPNet, net.IP) {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return fake.removeArgsForCall[i].arg1, fake.removeArgsForCall[i].arg2
}

func (fake *FakePool) RemoveReturns(result1 error) {
	fake.RemoveStub = nil
	fake.removeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePool) Capacity() int {
	fake.capacityMutex.Lock()
	fake.capacityArgsForCall = append(fake.capacityArgsForCall, struct{}{})
	fake.capacityMutex.Unlock()
	if fake.CapacityStub != nil {
		return fake.CapacityStub()
	} else {
		return fake.capacityReturns.result1
	}
}

func (fake *FakePool) CapacityCallCount() int {
	fake.capacityMutex.RLock()
	defer fake.capacityMutex.RUnlock()
	return len(fake.capacityArgsForCall)
}

func (fake *FakePool) CapacityReturns(result1 int) {
	fake.CapacityStub = nil
	fake.capacityReturns = struct {
		result1 int
	}{result1}
}

var _ subnets.Pool = new(FakePool)
