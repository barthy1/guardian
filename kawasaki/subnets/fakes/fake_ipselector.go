// This file was generated by counterfeiter
package fakes

import (
	"net"
	"sync"

	"github.com/cloudfoundry-incubator/guardian/kawasaki/subnets"
)

type FakeIPSelector struct {
	SelectIPStub        func(subnet *net.IPNet, existing []net.IP) (net.IP, error)
	selectIPMutex       sync.RWMutex
	selectIPArgsForCall []struct {
		subnet   *net.IPNet
		existing []net.IP
	}
	selectIPReturns struct {
		result1 net.IP
		result2 error
	}
}

func (fake *FakeIPSelector) SelectIP(subnet *net.IPNet, existing []net.IP) (net.IP, error) {
	fake.selectIPMutex.Lock()
	fake.selectIPArgsForCall = append(fake.selectIPArgsForCall, struct {
		subnet   *net.IPNet
		existing []net.IP
	}{subnet, existing})
	fake.selectIPMutex.Unlock()
	if fake.SelectIPStub != nil {
		return fake.SelectIPStub(subnet, existing)
	} else {
		return fake.selectIPReturns.result1, fake.selectIPReturns.result2
	}
}

func (fake *FakeIPSelector) SelectIPCallCount() int {
	fake.selectIPMutex.RLock()
	defer fake.selectIPMutex.RUnlock()
	return len(fake.selectIPArgsForCall)
}

func (fake *FakeIPSelector) SelectIPArgsForCall(i int) (*net.IPNet, []net.IP) {
	fake.selectIPMutex.RLock()
	defer fake.selectIPMutex.RUnlock()
	return fake.selectIPArgsForCall[i].subnet, fake.selectIPArgsForCall[i].existing
}

func (fake *FakeIPSelector) SelectIPReturns(result1 net.IP, result2 error) {
	fake.SelectIPStub = nil
	fake.selectIPReturns = struct {
		result1 net.IP
		result2 error
	}{result1, result2}
}

var _ subnets.IPSelector = new(FakeIPSelector)
