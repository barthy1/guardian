// This file was generated by counterfeiter
package fakes

import (
	"os"
	"sync"

	"github.com/cloudfoundry-incubator/guardian/kawasaki"
)

type FakeHostApplier struct {
	ApplyStub        func(cfg kawasaki.NetworkConfig, netnsFD *os.File) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		cfg     kawasaki.NetworkConfig
		netnsFD *os.File
	}
	applyReturns struct {
		result1 error
	}
}

func (fake *FakeHostApplier) Apply(cfg kawasaki.NetworkConfig, netnsFD *os.File) error {
	fake.applyMutex.Lock()
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		cfg     kawasaki.NetworkConfig
		netnsFD *os.File
	}{cfg, netnsFD})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(cfg, netnsFD)
	} else {
		return fake.applyReturns.result1
	}
}

func (fake *FakeHostApplier) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *FakeHostApplier) ApplyArgsForCall(i int) (kawasaki.NetworkConfig, *os.File) {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return fake.applyArgsForCall[i].cfg, fake.applyArgsForCall[i].netnsFD
}

func (fake *FakeHostApplier) ApplyReturns(result1 error) {
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

var _ kawasaki.HostApplier = new(FakeHostApplier)
