// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/guardian/kawasaki"
	"github.com/cloudfoundry-incubator/guardian/kawasaki/subnets"
)

type FakeSpecParser struct {
	ParseStub        func(spec string) (subnets.SubnetSelector, subnets.IPSelector, error)
	parseMutex       sync.RWMutex
	parseArgsForCall []struct {
		spec string
	}
	parseReturns struct {
		result1 subnets.SubnetSelector
		result2 subnets.IPSelector
		result3 error
	}
}

func (fake *FakeSpecParser) Parse(spec string) (subnets.SubnetSelector, subnets.IPSelector, error) {
	fake.parseMutex.Lock()
	fake.parseArgsForCall = append(fake.parseArgsForCall, struct {
		spec string
	}{spec})
	fake.parseMutex.Unlock()
	if fake.ParseStub != nil {
		return fake.ParseStub(spec)
	} else {
		return fake.parseReturns.result1, fake.parseReturns.result2, fake.parseReturns.result3
	}
}

func (fake *FakeSpecParser) ParseCallCount() int {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	return len(fake.parseArgsForCall)
}

func (fake *FakeSpecParser) ParseArgsForCall(i int) string {
	fake.parseMutex.RLock()
	defer fake.parseMutex.RUnlock()
	return fake.parseArgsForCall[i].spec
}

func (fake *FakeSpecParser) ParseReturns(result1 subnets.SubnetSelector, result2 subnets.IPSelector, result3 error) {
	fake.ParseStub = nil
	fake.parseReturns = struct {
		result1 subnets.SubnetSelector
		result2 subnets.IPSelector
		result3 error
	}{result1, result2, result3}
}

var _ kawasaki.SpecParser = new(FakeSpecParser)
